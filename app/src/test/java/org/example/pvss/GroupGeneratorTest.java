package org.example.pvss;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.math.BigInteger;

import org.bouncycastle.math.ec.ECPoint;
import org.junit.Test;

public class GroupGeneratorTest {

    /**
     * Tests that the group generated by GroupGenerator.generateGroup() meets
     * some basic properties.
     */
    @Test
    public void testGroupGeneration() {
        // Generate the group parameters using secp256r1.
        GroupGenerator.GroupParameters groupParams = GroupGenerator.generateGroup();

        // Check that the group parameters object is not null.
        assertNotNull("GroupParameters should not be null", groupParams);

        // Retrieve the prime modulus (characteristic of the underlying field) and
        // ensure it is valid.
        BigInteger p = groupParams.getgroupOrd();
        assertNotNull("Prime modulus p should not be null", p);
        assertTrue("Prime modulus p should be positive", p.compareTo(BigInteger.ZERO) > 0);

        // Retrieve the generator, an ECPoint.
        ECPoint G = groupParams.getG();
        assertNotNull("Generator G should not be null", G);
        assertFalse("Generator G should not be the point at infinity",
                G.equals(G.getCurve().getInfinity()));

        // Print these values for debugging purposes.
        System.out.println("Prime modulus p: " + p);

        System.out.println("Generator G: " + G);

        // Verify that the generator has the correct order.
        // In an elliptic curve group, multiplying the generator by the subgroup order
        // should yield the identity (point at infinity).
        ECPoint infinity = G.getCurve().getInfinity();
        ECPoint computed = G.multiply(p).normalize();
        assertTrue("G multiplied by its subgroup order should yield the identity (point at infinity)",
                computed.equals(infinity));

    }

    public static void main(String[] args) {
        GroupGeneratorTest param = new GroupGeneratorTest();
        param.testGroupGeneration();
    }
}
