package org.example.pvss;

import java.math.BigInteger;
import java.security.SecureRandom;

public class GroupGenerator {

    private static final SecureRandom random = new SecureRandom();

    /**
     * Generates group parameters based on a security parameter lambda.
     * The method generates a safe prime p (with p = 2q + 1) and finds a generator g
     * for the subgroup of order q in Z_p*.
     *
     * @param lambda security parameter in bits (the unary representation 1^Î»)
     * @return an instance of GroupParameters containing p and generator g
     */
    public static GroupParameters generateGroup(int lambda) {
        // We want p = 2q + 1 to be prime, so first generate a prime q of bit length
        // (lambda - 1)
        // We want p to be (rougly) lamda bits long, therefore we choose q as lamda-1.
        int qBitLength = lambda - 1;
        BigInteger q, p;
        while (true) {
            q = BigInteger.probablePrime(qBitLength, random);
            p = q.multiply(BigInteger.TWO).add(BigInteger.ONE);
            // Check that p is also prime (using a strong certainty parameter)
            if (p.isProbablePrime(100)) {
                break;
            }
        }

        // Find a generator g for the subgroup of order q
        BigInteger g;
        while (true) {
            // Choose a random candidate in the range [2, p-2]
            BigInteger candidate = new BigInteger(p.bitLength(), random);
            if (candidate.compareTo(BigInteger.TWO) == 0 || candidate.compareTo(p.subtract(BigInteger.TWO)) > 0) {
                continue;
            }
            // Candidate raised to power 2 lands in the subgroup of quadratic residues,
            // which is a subgroup of order q since p is a safe prime.
            g = candidate.modPow(BigInteger.TWO, p);
            // Check that g is not trivial and has order exactly q (i.e. g^q mod p = 1)
            if (!g.equals(BigInteger.ONE) && g.modPow(q, p).equals(BigInteger.ONE)) {
                break;
            }
        }
        return new GroupParameters(p, g);
    }

    /**
     * A simple container for the group parameters.
     */
    public static class GroupParameters {
        private final BigInteger p; // prime modulus
        private final BigInteger g; // generator of a subgroup of order q

        public GroupParameters(BigInteger p, BigInteger g) {
            this.p = p;
            this.g = g;
        }

        public BigInteger getP() {
            return p;
        }

        public BigInteger getG() {
            return g;
        }

        /**
         * Returns the order of the subgroup generated by g. Namely q.
         * For a safe prime p = 2q + 1, the subgroup of quadratic residues has order q.
         */
        public BigInteger getSubgroupOrder() {
            return p.subtract(BigInteger.ONE).divide(BigInteger.TWO);
        }

        @Override
        public String toString() {
            return "p = " + p + "\ng = " + g;
        }
    }
}
