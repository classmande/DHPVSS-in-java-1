package org.example.pvss;

import java.math.BigInteger;

import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.crypto.ec.CustomNamedCurves;
import org.bouncycastle.crypto.params.ECDomainParameters;
import org.bouncycastle.math.ec.ECPoint;

/**
 * The GroupGenerator class is responsible for setting up the cryptographic
 * group
 * used in the PVSS (DHPVSS) protocol. In this implementation, we use the
 * elliptic curve
 * secp256r1 (also known as prime256v1) to obtain a secure and efficient group.
 *
 * X9ECParameters is a standard class in Bouncy Castle (defined in the package
 * org.bouncycastle.asn1.x9) that encapsulates the elliptic curve parameters as
 * defined
 * by the ANSI X9.62 standard. These parameters include the elliptic curve
 * itself, the
 * generator (base point), the subgroup order, and the cofactor.
 *
 * We then wrap these in our custom GroupParameters container for use in our
 * PVSS context.
 */
public class GroupGenerator {
    /**
     * Generates group parameters based on the elliptic curve secp256r1.
     * secp256r1 is widely used, standardized, and offers a good balance between
     * security
     * and efficiency, making it a suitable choice for PVSS.
     *
     * @return an instance of GroupParameters containing the domain parameters.
     */
    public static GroupParameters generateGroup() {
        // Retrieve the parameters for secp256r1 (prime256v1) using Bouncy Castle's
        // CustomNamedCurves.
        // X9ECParameters encapsulates the curve, its generator, subgroup order,
        // cofactor, and an optional seed.
        X9ECParameters params = CustomNamedCurves.getByName("secp256r1");

        // Create ECDomainParameters using the retrieved curve parameters.
        // This packages the curve (params.getCurve()), the generator point
        // (params.getG()),
        // the subgroup order (params.getN()), the cofactor (params.getH()), and the
        // seed (params.getSeed()).
        ECDomainParameters ecParams = new ECDomainParameters(
                params.getCurve(),
                params.getG(), // return the generator point G of the elliptic curve group.
                params.getN(), // Returns the order (n) of the subgroup generated by the generator G.
                params.getH(), // This method returns the cofactor h of the elliptic curve. The cofactor is
                               // defined by the relationship {points on the curve} = h * n,
                params.getSeed()
        // This method returns a seed value (typically a byte array) that was used in
        // the generation of the curve parameters.
        // The seed is provided by the curve specification and is used to help verify
        // that the parameters were generated in a transparent and pseudo-random manner.
        // Not every curve necessarily makes use of the seed, but when present, it can
        // be useful for certain validation processes.
        );

        // Wrap the ECDomainParameters in our custom GroupParameters class and return
        // it.
        return new GroupParameters(ecParams);
    }

    /**
     * GroupParameters serves as a container for the elliptic curve domain
     * parameters.
     * It provides convenient access to the generator, prime modulus, subgroup
     * order, etc.,
     * for use in the PVSS protocol.
     */
    public static class GroupParameters {
        private final ECDomainParameters ecParams;

        /**
         * Constructs GroupParameters with the given ECDomainParameters.
         *
         * @param ecParams the ECDomainParameters containing the elliptic curve
         *                 parameters.
         */
        public GroupParameters(ECDomainParameters ecParams) {
            this.ecParams = ecParams;
        }

        /**
         * Returns the group generator (base point) as an ECPoint.
         *
         * @return the generator point G of the elliptic curve group.
         */
        public ECPoint getG() {
            return ecParams.getG();
        }

        /**
         * Returns the prime modulus p of the finite field over which the elliptic curve
         * is defined.
         * In elliptic curve cryptography, this is the characteristic of the underlying
         * field.
         *
         * @return the prime modulus p as a BigInteger.
         */
        public BigInteger getP() {
            return ecParams.getCurve().getField().getCharacteristic();
        }

        /**
         * Returns the order (n) of the subgroup generated by the generator G.
         *
         * @return the subgroup order n as a BigInteger.
         */
        public BigInteger getN() {
            return ecParams.getN();
        }

        /**
         * Returns the underlying ECDomainParameters.
         *
         * @return the ECDomainParameters object containing the full EC parameters.
         */
        public ECDomainParameters getEcParams() {
            return ecParams;
        }
    }
}
