package org.example.pvss;

import java.math.BigInteger;

import org.example.pvss.GroupGenerator.GroupParameters;

/**
 * Represents the context (public parameters) for DHPVSS as defined in the
 * paper:
 *
 * pp = (G, G, p, t, n, α₀, {(αᵢ, vᵢ) : i ∈ [n]})
 *
 * In this setting:
 * - p is the prime modulus defining the finite field. Defines the order of the
 * group.
 * - G is the generator of a cyclic subgroup of Zₚ* (chosen such that the
 * discrete logarithm problem is hard).
 * - t is the threshold (the secret-sharing polynomial is of degree ≤ t).
 * - n is the total number of participants.
 * - α₀ is the designated evaluation point.
 * - alphas is an array containing evaluation points: [α₀, α₁, ..., αₙ].
 * - v is an array containing the dual-code coefficients for indices 1 to n.
 *
 * Note: In a multiplicative group setting, the security of the protocol relies
 * on the difficulty
 * of the discrete logarithm problem in the subgroup generated by G.
 */
public class DhPvssContext {
    private final GroupParameters groupParams; // Prime modulus defining Z_p and Generator of the cyclic subgroup of
                                               // Zₚ*.
    private final int t; // Threshold (polynomial degree is ≤ t).
    private final int n; // Total number of participants.
    private final BigInteger alpha0; // Designated evaluation point α₀.
    private final BigInteger[] alphas; // Evaluation points [α₀, α₁, ..., αₙ].
    private final BigInteger[] v; // Dual-code coefficients for indices 1 to n.

    /**
     * Constructs a DhPvssContext object with the given public parameters.
     *
     * @param groupParams the prime order/Modolus and the generator of the cyclic
     *                    subgroup (a primitive root modulo
     *                    p).
     * @param t           the threshold (polynomial degree is ≤ t).
     * @param n           the total number of participants.
     * @param alpha0      the evaluation point α₀. (later used to store the secret)
     * @param alphas      the evaluation points, an array of length n+1 (indices 0
     *                    to n).
     * @param v           the dual-code coefficients, an array of length n (for i =
     *                    1 to
     *                    n).
     */
    public DhPvssContext(GroupParameters groupParams, int t, int n,
            BigInteger alpha0, BigInteger[] alphas, BigInteger[] v) {
        this.groupParams = groupParams;
        this.t = t;
        this.n = n;
        this.alpha0 = alpha0;
        this.alphas = alphas;
        this.v = v;
    }

    // Getters for all fields
    public BigInteger getOrder() {
        return groupParams.getP();
    }

    public BigInteger getGenerator() {
        return groupParams.getG();
    }

    public int getThreshold() {
        return t;
    }

    public int getNumParticipants() {
        return n;
    }

    public BigInteger getAlpha0() {
        return alpha0;
    }

    public BigInteger[] getAlphas() {
        return alphas;
    }

    public BigInteger[] getV() {
        return v;
    }

    public GroupParameters getGroupParameters() {
        return groupParams;
    }

    public BigInteger getSubgroupOrder() {
        return groupParams.getSubgroupOrder();
    }

}
