// package org.example.pvss;

// import org.bouncycastle.crypto.params.ECDomainParameters;
// import org.bouncycastle.jce.ECNamedCurveTable;
// import org.bouncycastle.jce.spec.ECParameterSpec;

// public class App {
// public static void main(String[] args) {
// // Use a standard curve, for example secp256r1 (P-256)
// ECParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec("secp256r1"); //
// Standardized elliptic curve
// ECDomainParameters group = new ECDomainParameters(
// ecSpec.getCurve(), // returns the specific elliptic curve (an instance of
// ECCurve)
// ecSpec.getG(), // return the base point we are using for these domain
// parameters.
// ecSpec.getN(), // (number of elements)/order of the group. generated by the
// chosen generator.
// ecSpec.getH()); // cofactor, which is used in certain calculations
// // and tells you how the subgroupâ€™s size relates to the entire group.

// int t = 3; // threshold
// int n = 6; // number of participants

// DhPvssContext ctx = new DhPvssContext();
// DhPvssUtils.dhPvssSetup(ctx, group, t, n); // We pass ctx, group, t, n, as
// arguments to the dhPVssSetup
// // function.

// // Print out some values to verify
// System.out.println("Alphas:");
// for (int i = 0; i < ctx.alphas.length; i++) {
// System.out.println(ctx.alphas[i]);
// }

// System.out.println("Vs:");
// for (int i = 0; i < ctx.vs.length; i++) {
// System.out.println(ctx.vs[i]);
// }
// }
// }
