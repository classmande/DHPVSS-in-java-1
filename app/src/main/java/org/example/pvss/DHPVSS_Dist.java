package org.example.pvss;

import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;

import org.bouncycastle.math.ec.ECPoint;

public class DHPVSS_Dist {

    /**
     * Holds the output of the distribution phase:
     * ‚Ä¢ C·µ¢ ‚àà ùîæ: encrypted shares for i=1‚Ä¶n
     * ‚Ä¢ Proof that ‚ü®U, pk_D‚ü© = V under exponent sk_D (i.e. V = sk_D¬∑U)
     */
    public static class DistributionResult {
        private final ECPoint[] C; // C·µ¢ = A·µ¢ + sk_D¬∑E·µ¢
        private final NizkDlEqProof œÄD; // DLEQ proof: log_U(V) = log_G(pk_D)

        public DistributionResult(ECPoint[] C, NizkDlEqProof œÄD) {
            this.C = C;
            this.œÄD = œÄD;
        }

        /** @return the array {C‚ÇÅ,‚Ä¶,C‚Çô} of encrypted shares */
        public ECPoint[] getEncryptedShares() {
            return C;
        }

        /** @return the DLEQ proof œÄD that V = sk_D¬∑U */
        public NizkDlEqProof getDleqProof() {
            return œÄD;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("DistributionResult {\n");
            sb.append("  Encrypted Shares C·µ¢:\n");
            for (ECPoint Ci : C) {
                sb.append("    ").append(Ci).append("\n");
            }
            sb.append("  DLEQ Proof œÄD: ").append(œÄD).append("\n");
            sb.append("}");
            return sb.toString();
        }
    }

    /**
     * Perform DHPVSS distribution of a secret point S ‚àà ùîæ across n parties:
     *
     * 1) Verify each ephemeral key E·µ¢ came with a valid NIZK proof.
     * 2) Compute Shamir shares A·µ¢ = S + m(Œ±·µ¢)¬∑G.
     * 3) Encrypt: C·µ¢ = A·µ¢ + sk_D¬∑E·µ¢ for i = 1‚Ä¶n.
     * 4) Build a hash‚Äëderived polynomial m* and evaluate at each Œ±·µ¢ to get e·µ¢,
     * then multiply by dual‚Äìcode weight v·µ¢ to obtain r·µ¢.
     * 5) Compute U = Œ£·µ¢ r·µ¢¬∑E·µ¢ and V = Œ£·µ¢ r·µ¢¬∑C·µ¢.
     * 6) Output {C·µ¢} and a DLEQ proof that V = sk_D¬∑U.
     *
     * @param ctx  DHPVSS context (generator G, {Œ±‚ÇÄ‚Ä¶Œ±‚Çô}, {v‚ÇÅ‚Ä¶v‚Çô}, threshold t)
     * @param epks array of EphemeralKeyPublic (E·µ¢ plus its proof)
     * @param dk   dealer‚Äôs DhKeyPair containing sk_D and pk_D=G¬∑sk_D
     * @param S    the dealer‚Äôs secret point (S = G¬∑s)
     */
    public static DistributionResult distribute(
            DhPvssContext ctx,
            EphemeralKeyPublic[] epks,
            DhKeyPair dk,
            ECPoint S) {

        // 1) verify each E·µ¢ proof
        for (EphemeralKeyPublic e : epks) {
            try {
                if (!NizkDlProof.verifyProof(ctx, e.getPublicKey(), e.getProof())) {
                    throw new IllegalArgumentException("Invalid proof for ephemeral key: " + e);
                }
            } catch (NoSuchAlgorithmException ex) {
                throw new RuntimeException("PRG unavailable", ex);
            }
        }

        // extract raw E·µ¢
        int n = ctx.getNumParticipants();
        ECPoint[] E = new ECPoint[n];
        for (int i = 0; i < n; i++) {
            E[i] = epks[i].getPublicKey();
        }

        // 2) compute Shamir shares A·µ¢ = S + m(Œ±·µ¢)¬∑G
        ECPoint[] A = GShamir_Share.generateSharesEC(ctx, S);

        // 3) encrypt shares: C·µ¢ = A·µ¢ + sk_D¬∑E·µ¢
        BigInteger skD = dk.getSecretKey();
        ECPoint[] C = new ECPoint[n];
        for (int i = 0; i < n; i++) {
            ECPoint mask = E[i].multiply(skD).normalize();
            C[i] = A[i].add(mask).normalize();
        }

        // 4) derive hash‚Äëchain polynomial m*(X):
        // hash(pk_D, {E·µ¢}, {C·µ¢}) ‚Üí poly coeffs of degree ‚â§ (n‚àít‚àí2)
        int deg = n - ctx.getThreshold() - 2;
        BigInteger p = ctx.getOrder();
        BigInteger[] mStar = HashingTools.hashPointsToPoly(
                dk.getPublic(), E, C, deg, p);

        // evaluate m* at each Œ±·µ¢ ‚Üí e·µ¢, then r·µ¢ = v·µ¢¬∑e·µ¢ mod p
        BigInteger[] Œ± = ctx.getAlphas();
        BigInteger[] v = ctx.getV();
        ECPoint U = ctx.getGenerator().getCurve().getInfinity();
        ECPoint V = ctx.getGenerator().getCurve().getInfinity();
        for (int i = 1; i <= n; i++) {
            BigInteger ei = EvaluationTools.evaluatePolynomial(mStar, Œ±[i], p);
            BigInteger ri = ei.multiply(v[i - 1]).mod(p);
            U = U.add(E[i - 1].multiply(ri)).normalize();
            V = V.add(C[i - 1].multiply(ri)).normalize();
        }

        // 5) prove V = sk_D¬∑U via DLEQ
        NizkDlEqProof œÄD = NizkDlEqProof.generateProof(
                ctx, U, dk.getPublic(), V, skD);

        // (optional) self‚Äëcheck
        System.out.println("U = " + U);
        System.out.println("V = " + V);
        System.out.println("DLEQ ok? " +
                NizkDlEqProof.verifyProof(ctx, U, dk.getPublic(), V, œÄD));

        return new DistributionResult(C, œÄD);
    }
}
